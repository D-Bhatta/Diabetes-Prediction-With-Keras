# -*- coding: utf-8 -*-
"""Diabetes_Prediction_With_Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Idp4M4b2xFONe18nf8gkdvH-JLKepCji

Install Tensorflow
"""

# !pip install tensorflow
# !pip install tensorflow-gpu
# !pip install keras

"""Download [Pima Indians Dataset](https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv)"""

# !wget -cq https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv

"""Check for GPU"""

# device_name = tf.test.gpu_device_name()
# if device_name != '/device:GPU:0':
#   raise SystemError("GPU device not found")
# print(f'Found GPU at: {device_name}')

"""Import modules"""

import tensorflow as tf
from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
from joblib import load
from joblib import dump

"""Check versions"""

print(tf.__version__)

"""Load the dataset"""

dataset = loadtxt('pima-indians-diabetes.data.csv', delimiter=',')
x = dataset[:,0:8]
y = dataset[:,8]

"""Define the model"""

model = Sequential()
model.add(Dense(12,input_dim=8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

"""Compile the model"""

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

"""Train the model for 150 epochs with 10-k batches"""

model.fit(x,y, epochs=150, batch_size=10)

"""Evaluate model accuracy"""

_, accuracy = model.evaluate(x,y)
print(f'Accuracy: {accuracy*100}')

"""Make predictions using model"""

y_pred = model.predict(x)
y_pred = [1 if i>=0.5 else 0 for i in y_pred]

"""Calculate statistics"""

total = 0
correct = 0
wrong = 0
for i in range(len(y_pred)):
  total = total + 1
  if y_pred[i] == y[i]:
    correct = correct + 1
  else:
    wrong = wrong + 1

print(f" Total: {total} \n Correct: {correct} \n Wrong: {wrong}")

"""Pipeline model"""

dump(model, 'model.sav')

test_model = load('model.sav')

_, accuracy = test_model.evaluate(x,y)
print(f'Accuracy: {accuracy*100}')

test_y_pred = test_model.predict(x)
test_y_pred = [1 if i>=0.5 else 0 for i in test_y_pred]

test_total = 0
test_correct = 0
test_wrong = 0
for i in range(len(test_y_pred)):
  test_total = test_total + 1
  if test_y_pred[i] == y[i]:
    test_correct = test_correct + 1
  else:
    test_wrong = test_wrong + 1

print(f"Loaded Model: \n Total: {test_total} \n Correct: {test_correct} \n Wrong: {test_wrong}")